FROM alpine

# 43.4MB
ENV NODE_VERSION=v7.5.0

ENV NPM_VERSION=4

# Build Node statically without npm
ENV CONFIG_FLAGS="--fully-static --without-npm"

RUN apk update && apk upgrade && \
    apk add --no-cache curl make gcc g++ python linux-headers binutils-gold libstdc++ && \

    # Pull nodejs source code and unpack
    curl -sSLO https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}.tar.xz && \
    tar -xf node-${NODE_VERSION}.tar.xz && \
    
    # cd to node directory and configure build
    cd node-${NODE_VERSION} && \
    ./configure --prefix=/usr ${CONFIG_FLAGS} && \
  
    # Do make utilising all available processors
    make -j$(getconf _NPROCESSORS_ONLN) && \

    # Install our newly build node
    make install && \

    cd / && \
    if [ -x /usr/bin/npm ]; then \
        npm install -g npm@${NPM_VERSION} && \
        find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
    fi && \

    # Remove packages used to build nodejs
    apk del curl make gcc g++ python linux-headers binutils-gold libstdc++ && \

    # Remove unnecessary files and directories.
    rm -rf /usr/include /node-${NODE_VERSION}* /usr/share/man /tmp/* /var/cache/apk/* \
        /root/.npm /root/.node-gyp /root/.gnupg /usr/lib/node_modules/npm/man \
        /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html \
        /usr/lib/node_modules/npm/scripts

# docker build --no-cache -t alpine-node -f Dockerfile.build .
# docker run --rm alpine-node node --version
